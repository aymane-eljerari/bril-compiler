---
execute:
  echo: true
format:
  html: default
  revealjs:
    chalkboard: true
    code-fold: true
    code-line-numbers: true
    echo: true
    output-file: revealjs_04_data_flow.qmd
    scrollable: true
    slideNumber: c/t
sidebar: false
title: Data Flow

---
The material in these slides have been taken from [Lecture Notes in Static Analysis" (Sec.6), by Michael I. Schwartzbach](
https://homepages.dcc.ufmg.br/~fernando/classes/dcc888/ementa/),  "Principles of Program Analysis", Chapter 6, by Niesen et al, and from Miachel Schwartzbach's "Lecture notes in Static Analysis", Chapter 6, First Section. 

##

![](df/ra1.svg)

##
![](df/ra2.svg)

##
![](df/ra3.svg)

##
![](df/ra4.svg)

##
![](df/ra5.svg)

##
![](df/ra6.svg)

##
![](df/ra7.svg)

##
![](df/ra8.svg)

##
![](df/ra9.svg)

##
![](df/ra10.svg)

##
![](df/ra11.svg)

##
![](df/ra12.svg)

##
![](df/ra13.svg)

##
![](df/ra14.svg)

##
![](df/ra15.svg)

##
![](df/ra16.svg)

##
![](df/ra17.svg)

##
![](df/ra18.svg)

##
![](df/ra19.svg)

##
![](df/ra20.svg)

##
![](df/ra21.svg)

##
![](df/ra22.svg)

##
![](df/ra23.svg)

##
![](df/ra24.svg)

##
![](df/ra25.svg)

##
![](df/ra26.svg)

##
![](df/ra27.svg)

##
![](df/ra28.svg)

##
![](df/ra29.svg)

##
![](df/ra30.svg)

##
![](df/ra31.svg)

##
![](df/ra32.svg)

##
![](df/ra33.svg)

##
![](df/ra34.svg)

##
![](df/ra35.svg)

##
![](df/ra36.svg)

## 
![](df/ra37.svg)

##
![](df/ra38.svg)

##
![](df/ra39.svg)

##
![](df/ra40.svg)

##
![](df/ra41.svg)

##
![](df/ra42.svg)

##
![](df/ra43.svg)

##
![](df/ra44.svg)

##
![](df/ra45.svg)

##
![](df/ra46.svg)

##
![](df/ra47.svg)

##
![](df/ra48.svg)

##
![](df/ra49.svg)

##
![](df/ra50.svg)

##
![](df/ra51.svg)

##
![](df/ra52.svg)

## 
![](df/ra53.svg)

##
![](df/ra54.svg)

##
![](df/ra55.svg)

##
![](df/ra56.svg)

##
![](df/ra57.svg)

##
![](df/ra58.svg)

##
![](df/ra59.svg)

##
![](df/ra60.svg)

##
![](df/ra61.svg)

##
![](df/ra62.svg)

##
![](df/ra63.svg)

##
![](df/ra64.svg)

##
![](df/ra65.svg)

##
![](df/ra66.svg)

##
![](df/ra67.svg)

##
![](df/ra68.svg)

##
![](df/ra69.svg)

##
![](df/ra70.svg)

##
![](df/ra71.svg)

##
![](df/ra72.svg)

##
![](df/ra73.svg)

##
![](df/ra74.svg)

##
![](df/ra75.svg)

##
![](df/ra76.svg)

##
![](df/ra77.svg)

##
![](df/ra78.svg)

## 
![](df/ra79.svg)

##
![](df/ra80.svg)

##
![](df/ra81.svg)

##
![](df/ra82.svg)

##
![](df/ra83.svg)

## 84
![](df/ra84.svg)

##
![](df/ra85.svg)

##
![](df/ra86.svg)

##
![](df/ra87.svg)

##
![](df/ra88.svg)

##
![](df/ra89.svg)

## 
![](df/ra90.svg)

##
![](df/ra91.svg)

##
![](df/ra92.svg)

##
![](df/ra93.svg)

##
![](df/ra94.svg)

##
![](df/ra95.svg)

##
![](df/ra96.svg)

##
![](df/ra97.svg)

##
![](df/ra98.svg)

##
![](df/ra99.svg)

##
![](df/ra100.svg)

##
![](df/ra101.svg)

##
![](df/ra102.svg)

##
![](df/ra103.svg)

##
![](df/ra104.svg)

##
![](df/ra105.svg)

##
![](df/ra106.svg)

##
![](df/ra107.svg)

##
![](df/ra108.svg)

##
![](df/ra109.svg)

##
![](df/ra110.svg)

##
![](df/ra111.svg)

##
![](df/ra112.svg)

##
![](df/ra113.svg)

##
![](df/ra114.svg)

##
![](df/ra115.svg)

##
![](df/ra116.svg)

##
![](df/ra117.svg)

##
![](df/ra118.svg)

##
![](df/ra119.svg)

##
![](df/ra120.svg)

##
![](df/ra121.svg)

##
![](df/ra122.svg)

##
![](df/ra123.svg)

##
![](df/ra124.svg)

##
![](df/ra125.svg)

##
![](df/ra126.svg)

##
![](df/ra127.svg)

##
![](df/ra128.svg)

##
![](df/ra129.svg)

##
![](df/ra130.svg)

##
![](df/ra131.svg)

## pseudo code 

```
// Initialize
for all CFG nodes n in N,
    OUT[n] = emptyset; // can optimize by OUT[n] = GEN[n];

// put all nodes into the changed set
// N is all nodes in graph,
Changed = N;

// Iterate 
while (Changed != emptyset)
{
    choose a node n in Changed;
    // remove it from the changed set
    Changed = Changed -{ n };

    // init IN[n] to be empty
    IN[n] = emptyset;
  
    // calculate IN[n] from predecessors' OUT[p]
    for all nodes p in predecessors(n)
         IN[n] = IN[n] Union OUT[p];

    oldout = OUT[n]; // save old OUT[n]
    
    // update OUT[n] using transfer function f_n ()
    OUT[n] = GEN[n] Union (IN[n] -KILL[n]);

    // any change to OUT[n] compared to previous value?
    if (OUT[n] changed) // compare oldout vs. OUT[n]
    {    
        // if yes, put all successors of n into the changed set
        for all nodes s in successors(n)
             Changed = Changed U { s };
    }
}
```



## loops 

This algorithm has no problems with loops!


## partial orders 

The domain of values you're trying compute needs to form a *partial order* with a unique lower bound. The rough idea is that the worklist algorithm should only "move" values monotonically in the order, so it's guaranteed to eventually terminate.

In terms of a partial order ⊑, the merge function is the *meet* (greatest lower bound) operator ⊓; the initial value is the top value ⊤; and the transfer function must be a monotonic function, so `x ⊑ y` implies `f(x) ⊑ f(y)`.

## homework 3  


Implement one data flow analysis - For Bonus points make it generic so that the
same code supports multiple analysis. As always, think about how to test it.

